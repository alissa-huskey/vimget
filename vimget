#!/usr/bin/env bash
#
# vimget -- like wget for vim plugins
# shellcheck disable=SC2059

# {{{ bash options

set -Eeo pipefail # fail on errors, even within pipes
shopt -s xpg_echo  # expand backslash escapes in echo automatically (ie \n)

read -r errfile < <(mktemp)

# }}} /bash options

# signal trapping {{{
#

vg:handle_err() {
  local trapped_code="$?"
  if [[ ! "$trapped_code" =~ ^[$code_env|$code_usr]$ ]]; then
    vg:err "ERROR: $trapped_code"
    vg:trace
    exit $code_err
  fi
}

trap vg:handle_err ERR
trap 'rm $errfile' EXIT

#
# }}} / signal trapping

# {{{ global variables

__me="${0##*/}"
__args=( "${@}" )

# }}} / global variables

# usage {{{
#

usage() {
  local -i code=${1}
  [[ -z "$code" ]] && code=${code_suc} || :

cat <<HELPTEXT
usage: ${__me} [-q|-V] [-n] [-d] <repo-uri> [[-n] <name>]
options:
  -d | --dry-run
  -c | --no-color
  -q | --quiet
  -V | --verbose

${__me} ${version} -- like wget for vim plugins
HELPTEXT

  exit $code
}

#
# }}} / usage

# error handling {{{
#

vg:trace() {
  local frame=0 line file func

  while read -r line func file < <(caller $frame); do
    if [[ -z "${file}" ]]; then
      file="${func}"
      printf "%s:%s\n" "${file##*/}" "${line}"
    else
      printf "%s:%s in %s()\n" "${file##*/}" "${line}" "${func}"
    fi
    ((frame++));
  done
}

vg:err() {
  local line header="Error:" i=0

  for line in "${@}"; do
    [[ $i -gt 0 ]] && header="     >" || :

    vg:printfx -c red -n "${header}" -r -p " ${line}" >&2
    : $(( i++ ))
  done
}

vg:die() {
  local -i code=${1} ; shift

  if [[ $# -gt 0 ]]; then
    vg:err "${@}"
  fi

  vg:print_errfile red grey 1

  exit $code
}

#
# }}} / error handling

# environment checking {{{
#

vg:has() {
  for pkg in "${@}"; do
    if command -v "${pkg}" > /dev/null; then
      return
    fi
  done

  return 1
}

vg:require_vim() {
  if ! vg:has vim nvim; then
    vg:die $code_env "vim not found"
  fi
}

vg:require_git() {
  if ! vg:has git; then
    vg:die $code_env "git not found"
  fi
}

vg:find_duplicates() {
  local -a dups
  local name="$1"

  IFS=$'\n' read -d '' -ra dups < <( {                                            \
    find -L "${user_vimdir}/bundle" -maxdepth 1 -mindepth 1 -iname "${name}"    ; \
    find -L "${user_vimdir}/pack" -maxdepth 3 -mindepth 3 -ipath "*/*/${name}"  ; \
    find -L "${vim_plugins_dir}" -maxdepth 1 -mindepth 1 -iname "${name}"       ; \
  } 2>/dev/null | sort -u ) || :

  if [[ ${#dups[@]} -gt 0 ]]; then
    vg:die ${code_env} "Plugin already installed at:" "${dups[@]}"
  fi

  return 0
}

vg:check_env() {
  home_dir="$(cd -P $HOME && printf "%s" "$PWD")"

  vg:require_git
  vg:require_vim
  vg:find_vimdir
  vg:find_plugins_dir
}

vg:find_plugins_dir() {
  local dir
  local -a dirs=(                            \
      "${VIM_PLUGINS_DIR:-#}"                \
      "${user_vimdir:-#}/bundle"             \
      "${user_vimdir:-#}/pack/bundle/start"  \
  )

  for dir in "${dirs[@]}"; do
    if cd -P ${dir} 2> /dev/null; then
      vim_plugins_dir="${PWD}"
      break
    fi
  done

  # shellcheck disable=SC2153
  if [[ -n "${VIM_PLUGINS_DIR}" ]] && [[ "${VIM_PLUGINS_DIR}" != "${dir}" ]]; then
    vg:die ${code_env} "Unable to access provided VIM_PLUGINS_DIR:" \
      "${VIM_PLUGINS_DIR}"
  fi


  if [[ -z "${vim_plugins_dir}" ]]; then
    vg:die ${code_env} "Unable to find plugins dir." \
      "Please set the environment variable VIM_PLUGINS_DIR to continue."
  fi

  vg:config "plugins-dir" "${vim_plugins_dir}"
}

vg:find_vimdir() {
  local dir
  # the :-# pattern replaces any empty variables with "#"
  # to avoid any unexpected behavior /paths
  local -a dirs=(                       \
      "${VIMDIR:-#}"                    \
      "${HOME:-#}/.vim"                 \
      "${HOME:-#}/vimfiles"             \
      "${HOME:-#}/config/nvim"          \
      "${HOME:-#}/AppData/Local/nvim"   \
      "${XDG_CONFIG_HOME:-#}/nvim"      \
  )

  for dir in "${dirs[@]}"; do
    if cd -P "${dir}" 2> /dev/null; then
      user_vimdir="${PWD}"
      break
    fi
  done

  if [[ -n "${VIMDIR}" ]] && [[ "${VIMDIR}" != "${dir}" ]]; then
    vg:die ${code_env} "Unable to access provided VIMDIR:" \
      "${VIMDIR}"
  fi

  if [[ -z "${user_vimdir}" ]]; then
    vg:die ${code_env} "Unable to find vimdir." \
      "Please set the environment variable VIMDIR to continue."
  fi

  vg:config "vimdir" "${user_vimdir}"
}

#
# }}} / environment checking

# printing output {{{
#

vg:color() {
  [[ ! "$TERM" =~ color ]] && return || :
  [[ "${color_mode}" == "off" ]] && return || :

  local color="${1}" code=""

  case "${color}" in
    red)              code='31'   ;;
    green)            code='32'   ;;
    yellow)           code='33'   ;;
    blue)             code='34'   ;;
    magenta)          code='35'   ;;
    cyan)             code='36'   ;;
    grey)             code='90'   ;;
    bright-red)       code='91'   ;;
    bright-green)     code='92'   ;;
    bright-yellow)    code='93'   ;;
    bright-blue)      code='94'   ;;
    bright-magenta)   code='95'   ;;
    bright-cyan)      code='96'   ;;
    reset)            code='39'   ;;
  esac

  printf "\033[${code}m"
}

vg:msg() {
  if [[ ${quiet_mode} ]]; then
    return
  fi

  vg:printfx "$@"
}

# colorize and format output
# args:
# -c <color>  -- print the following string(s) in color
# -n <string> -- don't print a newline after <string>
# -p <string> -- make paths of <string> pretty
# -r -- reset color
# <string> -- just print the string followed by a newline
vg:printfx() {
  local colored

  while [[ $# -ne 0 ]]; do
    case $1 in
      # -c <color> -- set color
      -c)
        if [[ "$2" == "reset" ]]; then
          colored=
        else
          colored="${2}"
        fi
        vg:color "${2}"
        shift
        ;;
      # -n <string> -- don't follow with newline
      -n)
        printf "%s" "${2}"
        shift
        ;;
      # -p <string> -- make paths of <string> pretty
      -p)
        vg:pretty_paths "${2}"
        printf "\n"
        shift
        ;;
      # -r -- reset color
      -r)
        colored=
        vg:color reset
        ;;
      # <string> -- just print the string followed by a newline
      *)
        printf "%s\n" "${1}"
        ;;
    esac
    shift
  done

  # reset the color if needed
  if [[ -n "${colored}" ]]; then
    vg:color reset
  fi
}

vg:config() {
  [[ ! ${verbose_mode} ]] && return || :

  local var="${1}" val="${2}" width1=12 width2=50 str

  read -r str < <( vg:pretty_paths "${val}" ) || :

  vg:printfx -c bright-blue -n "|"
  printf " %-*s " ${width1} "${var}"
  vg:printfx -c bright-blue -n "|"
  printf " %-*s " ${width2} "${str}"
  vg:printfx -c bright-blue "|"
}

vg:success() {
  if [[ $dryrun_mode ]] || [[ $quiet_mode ]]; then
    return
  fi

  vg:msg -c green -n "[SUCCESS]" -r -n " Plugin installed at: " -p "${target_path}"
  printf "\n"
}

vg:debug() {
  vg:printfx -c yellow -n "DEBUG:" -c reset  -n " " "${@}"
}

vg:pretty_paths() {
  local i str="$1" path shorthand

  local -a paths=(                                 \
    "${vim_plugins_dir}" '$VIM_PLUGINS_DIR'        \
    "${user_vimdir}"     '$VIMDIR'                 \
    "${user_pwd}"        '.'                       \
    "${HOME}"            '~'                       \
    "${TMPDIR%/}"        '$TMPDIR'                 \
  )

  for(( i=0; i < ${#paths[@]}; i+=2 )); do
    path="${paths[$i]}"
    shorthand="${paths[((i+1))]}"

    if [[ "${str}" == "$path" ]]; then
      continue
    fi
    str="${str/$path/$shorthand}"
  done

  printf "%s" "${str}"
}

vg:print_errfile() {
  if [[ ! -s "$errfile" ]]; then
    return
  fi

  local spacer_color="$1" text_color="$2" force=$3

  if [[ ${quiet_mode} ]] && [[ ! ${force} ]]; then
    return
  fi

  # append a line in case the last line didn't
  echo >> "${errfile}"

  while read -r line; do
    # skip blank lines
    if [[ -z "${line// /}" ]]; then
      continue
    fi

    vg:printfx -c "${spacer_color}" -n "| " -c "${text_color}" "$line"
  done < "${errfile}"

  # clear the file
  echo > "${errfile}"
}

#
# }}} / printing output

# parsing input {{{
#

vg:name_matcher() {
  sed -nE 's/^([a-zA-Z0-9][a-zA-Z0-9\-\.]+[a-zA-Z0-9])$/\1/p' <<< "$1"
}

#  */<name>.git
vg:uri_matcher_dot_git() {
  sed -nE 's/^.*\/([^/]+).git[/]?$/\1/p' <<< "$1"
}

# *github.com/*/<name>
vg:uri_matcher_github() {
  sed -nE 's/^.*github\.com\/[^/]+\/([^/]+)[/]?$/\1/p' <<< "$1"
}

# git://.*/(<name>)
vg:uri_matcher_git_scheme() {
  sed -nE 's/^git:\/\/.+\/([^/]+)[/]?$/\1/p'<<< "${1#/}"
}

# <owner>/<name>
vg:uri_matcher_github_shorthand() {
  sed -nE 's/^[^/]+\/([^/]+)$/\1/p'<<< "${1#/}"
}

vg:uri_matcher() {
  for fun in dot_git github git_scheme github_shorthand; do
    read -r repo_name < <("vg:uri_matcher_${fun}" "${1}") || :
    if [[ -n "${repo_name}" ]]; then
      break
    fi
  done
}

# parse - parse the plugin name from the repo uri
#         and set global variables
# usage: parse <url>
vg:parse_uri() {
  vg:uri_matcher "${1}"

  if [[ -z "$repo_name" ]]; then
    vg:die ${code_usr} "Unable to recognize URI: '${1}'." \
      "Expecting something that looks like *.git, *github.com* or git://*"
  fi

  repo_uri="${1}"
  target_path="${vim_plugins_dir}/${repo_name}"

  if [[ "$fun" == "github_shorthand" ]]; then
    repo_uri="https://github.com/${repo_uri}"
  fi

  vg:config "repo-name" "${repo_name}"
  vg:config "repo-uri" "${repo_uri}"
  vg:config "plugin-name" "${plugin_name}"
  vg:config "target-dir" "${target_path}"
}

# split -xyz into -x -y -z
#   saves results to args()
vg:split_shortargs() {
  local arg
  while [[ $# -ne 0 ]]; do
    arg="$1"
    if [[ "$arg" =~ ^-[a-zA-Z]+$ ]]; then
      while read -rn 1; do
        [[ ${#REPLY} -gt 0 ]] && args+=("-${REPLY}") || :
       done  <<< "${arg#-}"
    else
      args+=( "${arg}" )
    fi
    shift
  done
}

vg:handle_args() {
  [[ $# -eq 0 ]] && usage ${code_usr} || :

  local arg

  while [[ $# -ne 0 ]]; do
    arg="$1"
    case "${arg}" in
    ''|-h*|--h*|help)  usage                                             ;;
    -d|--dry-run)      dryrun_mode="on"                                  ;;
    -c|--no-color)     color_mode="off"                                  ;;
    -q|--quiet)        quiet_mode="true"                                 ;;
    -V|--verbose)      verbose_mode="true"                               ;;
    -n|--name)         list+=("${arg}")                                  ;;
    -*)                vg:die ${code_usr} "unrecognized option: ${arg}"  ;;
    *)                 list+=("${arg}")                                  ;;
    esac
    [[ $# -gt 0 ]] && shift || :
  done

  if [[ ${NO_COLOR} ]]; then
    color_mode="off"
  fi

  if [[ ${verbose_mode} ]]; then
    quiet_mode=
  fi

  if [[ ${#list[@]} -eq 0 ]]; then
    vg:die ${code_usr} "missing required argument: <repo-uri>"
  fi
}

#
# }}} / parsing input

# job management {{{
#

vg:run() {
  local ec cmd

  vg:msg -c grey -p "> ${*}"

  if [[ $dryrun_mode ]]; then
    return
  fi

  "${@}" 2> "${errfile}" || ec=$?

  if [[ $ec -ne 0 ]]; then
    vg:die ${code_fail} "[$?] Command failed:" "${*}"
  else
    vg:print_errfile grey grey
  fi
}

vg:fetch_plugin() {
  local noise_flag="" repo_uri="$1" name="$2"
  [[ -n "${quiet_mode}" ]] && noise_flag="--quiet" || :
  [[ -n "${verbose_mode}" ]] && noise_flag="--verbose" || :

  # intentionally left name unquoted here so that if it's blank
  # git does not read it as an invalid repo name
  vg:run cd "${vim_plugins_dir}" && \
    vg:run git clone ${noise_flag} --depth 1 "${repo_uri}" ${name}
}

vg:helptags() {
  if [[ $dryrun_mode ]]; then
    return
  fi

  local target_path="$1"

  while IFS= read -r -d $'\0' docpath ; do

    # -E -s   -- run in Ex mode but with "Entering Ex mode" messages silenced
    # -C      -- run in compatible mode -- suppresses escape codes
    # -u NONE -- like --clean but works for older vim versions
    # -c redir >> ${errfile} -- appends any vim errors to our error file
    vg:run vim -E -s -C -u NONE -c "redir >> ${errfile}" -c "helptags "${docpath} -c 'q'

    if [[ ! -e "${docpath}/tags" ]]; then
      vg:die $code_fail ":helptags failed for path:" "${docpath}"
    fi

  done < <( find ${target_path} -type d -name doc -print0 )
}

vg:validate_name() {
  local plugin_name="$1" matched
  if [[ -z "${plugin_name}" ]]; then
    return
  fi

  read -r matched < <( vg:name_matcher "${plugin_name}" ) || :
  if [[ -z "${matched}" ]]; then
    vg:die $code_usr "Invalid argument for <name>: ${plugin_name}"
  fi
}

vg:get_plugin() {
  local repo_uri="$1"
  local repo_name target_path  # final plugin details
  plugin_name="$2"

  vg:parse_uri "${repo_uri}"
  vg:validate_name "${plugin_name}"

  # intentionally left unquoted so that if $plugin_name
  # is empty, $repo_name will go to $1
  vg:find_duplicates ${plugin_name} ${repo_name}

  vg:fetch_plugin "${repo_uri}" "${plugin_name}"
  vg:helptags "${target_path}"
  vg:success
}

#
# }}} / job management

vg:get_list() {
  local repo

  # handle vimpack <repo> <name>
  if [[ $# -eq 2 ]]; then
    vg:uri_matcher "${2}"

    # but not if $2 looks like a uri
    if [[ -z "$repo_name" ]]; then
      vg:get_plugin "${@}"
      return
    fi
  fi

  while [[ $# -gt 0 ]]; do

    case "${1}" in

      # handle vimpack <repo> -n <name>
      -n|--name)
        if [[ -z "${repo}" ]]; then
          vg:die ${code_usr} "Invaild arguments order." "-n <name> must come after <repo>"
        fi

        vg:get_plugin "${repo}" "${2}"
        repo=
        shift
        ;;


      # hang onto <repo> in case a -n arg is next
      # if we have a repo from last time
      # handle vimpack <repo>
      *)
        if [[ -n "${repo}" ]]; then
          vg:get_plugin "${repo}"
        fi

        repo="${1}"
        ;;

    esac

    [[ $# -gt 0 ]] && shift || :
  done

  # finally, process the last <repo> in the list
  # handle vimpack <repo>
  if [[ -n "${repo}" ]]; then
    vg:get_plugin "${repo}"
  fi
}

main() {
  local color_mode=on dryrun_mode quiet_mode verbose_mode  # modes
  local user_vimdir vim_plugins_dir home_dir               # found or assigned paths
  local -a args list                                       # input

  local version='0.2'
  local user_pwd="${PWD}"

  # exit codes
  local code_suc=0      # success
  local code_err=1      # error
  local code_env=102    # missing requirement
  local code_usr=103    # invalid input
  local code_fail=104   # external command failure

  vg:split_shortargs "${__args[@]}"
  vg:handle_args "${args[@]}"
  vg:check_env

  vg:get_list "${list[@]}"

  return ${code_suc}
}

main
